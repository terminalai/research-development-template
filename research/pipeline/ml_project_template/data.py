# AUTOGENERATED! DO NOT EDIT! File to edit: 00_data.ipynb (unless otherwise specified).

__all__ = ['plot_histogram', 'plot_trellis']

# Cell

# ^(this cell is exported to ml_project_template/ml_project_template/data.py)
# you could also define another module to export to.
# however, all modules that you export to, must have a notebook with the same name and header!

# function for drawing histograms of a dataframe
import matplotlib.pyplot as plt
import pandas as pd


def plot_histogram(df):
    """
    Plot histograms of a dataframe
    """
    n_cols = len(df.columns)
    col_names = df.columns.values
    fig, axs = plt.subplots(
        1, n_cols, figsize=(3 * n_cols, 3), constrained_layout=True, sharey="row"
    )
    for i in range(n_cols):
        ax = axs[i]
        col_name = col_names[i]
        x = df[col_name]
        x.plot(ax=ax, kind="hist")
        xmin, xmax = min(x), max(x)
    for i in range(n_cols):  # to have equal tick lines in each plot
        ax = axs[i]
        col_name = col_names[i]
        x = df[col_name]
        xmin, xmax = min(x), max(x)
        ax.hlines(
            y=axs[df.apply(lambda x: x.max()).argmin()].get_yticks()[
                1:-1
            ],  # select ticks from the fig with smallest max value
            xmin=xmin,
            xmax=xmax,
            colors="white",
            alpha=1,
            linewidth=2,
        )
        ax.set_xlabel(col_name)
        ax.set_title(f"{i})", loc="left")
        ax.spines["left"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.spines["top"].set_visible(False)
    return fig, ax

# Cell

# Make a multiple of scatter plots
def plot_trellis(df, legend_title="y", true_label="True", false_label="False"):
    """
    Make a trellis plot of a dataframe against a binary y value in last column
    """
    n_cols = df.shape[1] - 1
    col_names = df.columns.values

    fig, axs = plt.subplots(
        n_cols, n_cols, figsize=(n_cols * 3, n_cols * 3), constrained_layout=True
    )
    for i in range(n_cols):
        for j in range(n_cols):
            ax = axs[i, j]
            if i != j:
                # first plot negative cases
                df[df.iloc[:, -1] == 0].plot(
                    ax=ax,
                    x=col_names[j],
                    y=col_names[i],
                    kind="scatter",
                    color="b",
                    marker="o",
                    alpha=0.5,
                    label=false_label,
                )
                # then positive cases
                df[df.iloc[:, -1] != 0].plot(
                    ax=ax,
                    x=col_names[j],
                    y=col_names[i],
                    kind="scatter",
                    color="r",
                    marker="x",
                    alpha=0.5,
                    label=true_label,
                )
                # Hide the right and top spines
                ax.spines["right"].set_visible(False)
                ax.spines["top"].set_visible(False)
                ax.set_title(f"{i*n_cols+j})", loc="left")
                ax.legend(title=legend_title)
            else:
                ax.annotate(xy=(0, 0.5), text=col_names[i], fontsize=20)
                ax.axis("off")  # hide the box
    return fig, ax